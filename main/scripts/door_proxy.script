go.property("selected", false)
go.property("scale_to", vmath.vector3(2,2,1))
go.property("door_tile", vmath.vector3())
go.property("selected_color", vmath.vector4(1,1,1,1))
go.property("door_number", 1)
go.property("open", false)

go.property("room1", msg.url())
go.property("room2", msg.url())

go.property("closed_tile", 33)
go.property("open_tile", 53)

function init(self)
	msg.post("#warning", "disable")
	label.set_text("#label", "D"..string.upper(map_state.get_display_id(self.door_number)))
	if self.open then
		open_door(self)
	else
		close_door(self)
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)

	if not self.selected and map_state.doors_selected() then
		msg.post(".", "acquire_input_focus")
		self.selected = true
		label.set_text("#label", string.upper(map_state.get_display_id(self.door_number)))
		local tmp_scale = self.scale_to
		scale = go.get("#label", "scale")
		self.scale_to = scale
		go.set("#label", "scale", tmp_scale)

		local tmp_color = self.selected_color
		color = go.get("#label", "color")
		self.selected_color = color
		go.set("#label", "color", tmp_color)
		
	elseif self.selected and not map_state.doors_selected() then
		msg.post(".", "release_input_focus")
		self.selected = false
		label.set_text("#label", "D"..string.upper (map_state.get_display_id(self.door_number)))
		local tmp_scale = self.scale_to
		scale = go.get("#label", "scale")
		self.scale_to = scale
		go.set("#label", "scale", tmp_scale)

		local tmp_color = self.selected_color
		color = go.get("#label", "color")
		self.selected_color = color
		go.set("#label", "color", tmp_color)
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if self.selected and action_id == hash("text") and hash(action.text) == hash(map_state.get_display_id(self.door_number)) then
		if not self.open then
			open_door(self)
			msg.post(":/sound#660", "play_sound")
		else
			close_door(self)
			msg.post(":/sound#440", "play_sound")
		end
		map_state.select_doors(false)
	end
end

function open_door(self)
	

	local room1_pressure = go.get(self.room1, "pressure")
	local room2_pressure = go.get(self.room2, "pressure")
	
	local difference = math.max(room1_pressure, room2_pressure) - math.min(room1_pressure, room2_pressure)

	if difference > 0 and not self.open then
		msg.post("#warning", "enable")
		go.animate("#warning", "color", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1,1,1,1), vmath.vector({0,1,0,1,0}), 2, 0, function()
			go.set("#warning", "color", vmath.vector4(1,0,0,1))
			msg.post("#warning", "disable")
		end)
	else
		msg.post(self.room1, "door_opened")
		msg.post(self.room2, "door_opened")
		self.open = true
		tilemap.set_tile(":/map_obj#level_1_tilemap", "layer1", self.door_tile.x, self.door_tile.y, self.open_tile)
	end
end

function close_door(self)
	if self.open then
		msg.post(self.room1, "door_closed")
		msg.post(self.room2, "door_closed")
		self.open = false
		tilemap.set_tile(":/map_obj#level_1_tilemap", "layer1", self.door_tile.x, self.door_tile.y, self.closed_tile)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
