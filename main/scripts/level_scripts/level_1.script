local tbutils = require("main.modules.textbox_utils")

function init(self)
	map_state.set_level_script(msg.url())

	self.expected_event_callback = function(message_id, message)
		
	end

	local texts_1 = {
		{text = "You see me yet? I'm in room 3 over.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Yes, I can see you over.", name="You"},
		{text = "Good. You think you can get door three open? Over.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
			self.expected_event_callback = function(message_id, message)
				if message_id == hash("door_opened") and message.door_id == 3 then
					self.expected_event_callback = function(message_id, message) end
					msg.post(msg.url(), "progress_story", {text_table = "texts_2", delay = 1})
				end
			end
		end, stop = true}
	}

	self["texts_2"] = {
		{text = "Door should be opening now over", name="You"},
		{text = "Yeah its opening over.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Im moving to room four . . .", name="Emily"},
		{text = "Keep an eye on me over.", name="Emily"},
		{text = "Just report back what you see over", name="You", stop = true, callback = function()
			msg.post("sound#static_blip", "play_sound")
			local path = djk.path(3, 4)
			msg.post(":/emily_marker#emily_marker", "set_path", {path = path})
			self.expected_event_callback = function(message_id, message)
				if message_id == hash("room_entered") and message.room_id == 4 then
					self.expected_event_callback = function(message_id, message) end
					msg.post(msg.url(), "progress_story", {text_table = "texts_3", delay = 1})
				end
			end
		end}
	}

	self["texts_3"] = {
		{text = "Could you get door four open for me?", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")

			self.expected_event_callback = function(message_id, message)
				
				if message_id == hash("door_opened") and message.door_id == 4 then
					local path = djk.path(4, 5)
					msg.post(":/emily_marker#emily_marker", "set_path", {path = path})
					self["event_4"]()
				end
			end
		end, stop = true}
	}

	self["event_4"] = function()
		self.expected_event_callback = function(message_id, message)

			if message_id == hash("room_entered") and message.room_id == 5 then
				self.expected_event_callback = function(message_id, message) end
				timer.delay(2, false, function() 
					local alarm_obj = factory.create(":/malfunction_alarm#factory")
					sound.play(":/sound#chirp_alarm_400_800")
					map_state.disable_input()

					-- START LOSE CONTROLL SEQUENCE
					local chain_id = map_state.begin_event_chain(function()
						map_state.move_camera_to_obj(":/r8", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						sound.play(":/sound#tone_alarm", {gain = 0.25})
					end, 2)
					map_state.chain_event(chain_id, function()
						msg.post(":/r8", "set_pressure", {pressure = 0})
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/r6", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/r6", "set_pressure", {pressure = 0})
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/d8", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/d8", "open_door")
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/d5", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/d5", "open_door")
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/d6", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/d6", "open_door")
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/r7", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/r7", "set_pressure", {pressure = 0})
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/d10", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/d10", "open_door")
					end, 1.5)
					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/d7", 0.5)
					end, 0.5)
					map_state.chain_event(chain_id, function()
						msg.post(":/d7", "open_door")
					end, 1.5)

					map_state.chain_event(chain_id, function() 
						map_state.move_camera_to_obj(":/emily_marker", 0.75)
					end, 0.5)
					-- ...

					map_state.chain_event(chain_id, function()
						map_state.enable_input()
						go.delete(alarm_obj)
						sound.stop(":/sound#chirp_alarm_400_800")
					end, 1)
					map_state.chain_event(chain_id, function()
						sound.stop(":/sound#tone_alarm")
					end, 0)
					map_state.execute_event_chain(chain_id)
					-- END LOSE CONTROL SEQUENCE
				end)
			end
		end
	end
	
	tbutils.fresh_start(self, texts_1)

	timer.delay(3, false, function()
		tbutils.show_text(self)
	end)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)

	self.expected_event_callback(message_id, message)
	
	tbutils.handle_textbox_message(self, message_id, message)

	if message_id == hash("progress_story") then
		tbutils.start(self, self[message.text_table])

		timer.delay(message.delay, false, function()
			tbutils.show_text(self)
		end)
	end
	
	if message_id == hash("door_opened") then
		print(message.door_id.." is open")
	end

	if message_id == hash("door_closed") then
		print(message.door_id.." is closed")
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
