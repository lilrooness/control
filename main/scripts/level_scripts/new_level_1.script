local tbutils = require("main.modules.textbox_utils")

function init(self)
	map_state.set_level_script(msg.url())
	map_state.set_emily_room(2)

	self.expected_event_callback = function(message_id, message) end

	self["confirm_order"] = {
		{text = "Ok, on my way", name="Emily", callback= function()
			msg.post("sound#static_blip", "play_sound")
		end, stop=true}
	}

	self["door_is_closed"] = {
		{text = "Open the door and I'll consider it", name="Emily", callback= function()
			msg.post("sound#static_blip", "play_sound")
		end, stop=true}
	}

	self["room_3"] = {
		{text = "Looks like an office", name="Emily", callback= function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "A desk . . . some drawers", name="Emily"},
		{text = "which aren't locked", name="Emily"},
		{text = "...", name=""},
		{text = "... ...", name=""},
		{text = "Come in Emily", name="You"},
		{text = "Found something . . . looks like a data drive", name="Emily", callback= function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Any way you can read what's on it from there?", name="You"},
		{text = "Noop. That sure does sound a whole lot like your job though . . .", name="Emily"},
		{text = "I'm going to plug this in to my tansponder and send it to you now", name="Emily"},
		{text = "Thanks Emily", name="You"},
		{text = "Sorry. The sarcasm is a defence mechanism", name="Emily"},
		{text = "That's ok, its almost helping", name="You"}
		
	}

	self.room_choices = {
		[1] = {{text="Enter room on left", callback=function()

			if map_state.is_seperating_door_open(map_state.get_emily_room(), 3, msg.url()["socket"]) then
					local chain_id = map_state.begin_event_chain(function()
						msg.post(msg.url(), "progress_story", {text_table = "confirm_order", delay = 1})
					end, 1)
					map_state.chain_event(chain_id, function()
						local path = djk.path(map_state.get_emily_room(), 3)
						msg.post(":/emily_marker#emily_marker", "set_path", {path = path})
					end, 0)
					map_state.execute_event_chain(chain_id)
				else
					msg.post(msg.url(), "progress_story", {text_table = "door_is_closed", delay = 1})
				end
				
			end},
			{text="Enter room on right"},
			{text="Enter room ahaed"}},
		[3] = nil
	}

	local texts_1 = {
		{text = "You see me yet? I'm in room 2", name="Emily", callback = function() 
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Yes, I can see you.", name="You"},
		{text = "Good.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I've been trying to get this door open but everything's on lock down in here, can you help?", name="Emily"},
		{text = "looks like there's no pressure in the room next door. I'll have to repressurise it then I'll be able to open the door", name="You"},
		{text = "No pressure? What the hell is going on?", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I know about as much as you at this point", name="You", callback=function()
			self.expected_event_callback = function(message_id, message)
				if message_id == hash("door_opened") and message.door_id == 1 then
					self.expected_event_callback = function(message_id, message) end
					msg.post(msg.url(), "progress_story", {text_table = "texts_2", delay = 1})
				end
			end
		end, stop=true}
	}

	self["texts_2"] = {
		{text = "Thanks", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I'm moving in to the crio lobby ... ", name="Emily", callback = function()
			self.expected_event_callback = function(message_id, message)
				local path = djk.path(2, 1)
				msg.post(":/emily_marker#emily_marker", "set_path", {path = path})
				if message_id == hash("room_entered") and message.room_id == 1 then
					self.expected_event_callback = function(message_id, message) end
					msg.post(msg.url(), "progress_story", {text_table = "texts_3", delay = 1})
				end
			end
		end, stop=true}
	}

	self["texts_3"] = {
		{text = "Urrr . . .", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Everything ok?", name="You"},
		{text = "It smells really bad in here", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "That's weird, the room was just pressurised", name="You"},
		{text = "There's stuff in the air . . . Its . . .", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I think it's dust", name="Emily"},
		{text = "It's everywhere . . . on the reception desk, the floor . . .", name="Emily"},
		{text = ". . .", name="Emily"},
		{text = "Any ideas?", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "And don't stay quiet for so long, it's making me nervous", name="Emily"},
		{text = "I'm Here. Sorry, i'm thinking", name="You"},
		{text = "Yeah? While your thinking I'm shitting myself down here so bear that in mind ok? smart guy?", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
			map_state.enable_comms(true)
		end, stop=true}
	}

	tbutils.fresh_start(self, texts_1)

	timer.delay(3, false, function()
		tbutils.show_text(self)
	end)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	
	self.expected_event_callback(message_id, message)
	
	tbutils.handle_textbox_message(self, message_id, message)

	if message_id == hash("progress_story") then
		tbutils.start(self, self[message.text_table])

		timer.delay(message.delay, false, function()
			tbutils.show_text(self)
		end)
	elseif message_id == hash("comms") then
		local choices = {}
		for _, choice in pairs(self.room_choices[map_state.get_emily_room()]) do
			table.insert(choices, choice.text)
		end
		monarch.show("choicebox", {}, {url=msg.url(), choices=choices})
	elseif message_id == hash("choice_selected") then
		self.room_choices[map_state.get_emily_room()][message["selected"]].callback()
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
