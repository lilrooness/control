local tbutils = require("main.modules.textbox_utils")

function init(self)
	map_state.set_level_script(msg.url())
	map_state.set_emily_room(2)

	self.expected_event_callback = function(message_id, message) end

	local texts_1 = {
		{text = "You see me yet? I'm in room 2", name="Emily", callback = function() 
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Yes, I can see you.", name="You"},
		{text = "Good.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I've been trying to get this door open but everything's on lock down in here, can you help?", name="Emily"},
		{text = "looks like there's no pressure in the room next door. I'll have to repressurise it then I'll be able to open the door", name="You"},
		{text = "No pressure? What the hell is going on?", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I know about as much as you at this point", name="You", callback=function() 
			self.expected_event_callback = function(message_id, message)
				if message_id == hash("door_opened") and message.door_id == 1 then
					self.expected_event_callback = function(message_id, message) end
					msg.post(msg.url(), "progress_story", {text_table = "texts_2", delay = 1})
				end
			end
		end, stop=true}
	}

	self["texts_2"] = {
		{text = "Thanks", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "I'm moving in to the crio lobby ... ", name="Emily", callback = function()
			self.expected_event_callback = function(message_id, message)
				local path = djk.path(2, 1)
				msg.post(":/emily_marker#emily_marker", "set_path", {path = path})
				if message_id == hash("room_entered") and message.room_id == 1 then
					self.expected_event_callback = function(message_id, message) end
					msg.post(msg.url(), "progress_story", {text_table = "texts_3", delay = 1})
				end
			end
		end, stop=true}
	}

	self["texts_3"] = {
		{text = "It's ...", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Can you describe what you see?", name="You"},
		{text = "Oh God ...", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Emily tell me what your seeing", name="You"},
		{text = "Bodies.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "How many?", name="You"},
		{text = "Two", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "...", name="Emily"},
		{text = "Three bodies.", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "What condition are they in?", name="You"},
		{text = "My god the smell ...", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end},
		{text = "Maybe a couple of weeks?", name="Emily"},
		{text = "Looks like they were stabbed, two males in the throat", name="Emily"},
		{text = "One female with a ...", name="Emily"},
		{text = "A chest wound", name="Emily", callback = function()
			msg.post("sound#static_blip", "play_sound")
		end, stop=true}
	}

	tbutils.fresh_start(self, texts_1)

	timer.delay(3, false, function()
		tbutils.show_text(self)
	end)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	
	self.expected_event_callback(message_id, message)
	
	tbutils.handle_textbox_message(self, message_id, message)

	if message_id == hash("progress_story") then
		tbutils.start(self, self[message.text_table])

		timer.delay(message.delay, false, function()
			tbutils.show_text(self)
		end)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
