go.property("node_id", 0)
go.property("edges", vmath.vector4())
go.property("connections", 0) -- max 4

go.property("door_url", msg.url())

function init(self)
	local edges = get_edges(self)
	djk.set_node(self.node_id, edges, go.get_id())
	-- msg.post("#sprite", "disable")
	label.set_text("#node_id_label", ""..self.node_id)
	
	local connections_dbg_text = "Edges: "

	for _, edge in pairs(edges) do
		connections_dbg_text = connections_dbg_text..", "..edge
	end

	-- if the door_url property has not been overriden, set it to hash("not_set")
	-- If it has been overriden, then we assume that it is a door node
	-- and Emily checks whether that door is open before passing through
	if self.door_url.path == (msg.url()).path then
		self.door_url = hash("not_set")
	end

	label.set_text("#connections_label", connections_dbg_text)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end


function get_edges(self)
	local c = {self.edges.x, self.edges.y, self.edges.z, self.edges.w}

	local r = {}
	
	for i=1, self.connections, 1 do
		table.insert(r, c[i])
	end

	return r
end