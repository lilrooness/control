go.property("speed", 1)
go.property("tilesize", 128)
go.property("start", vmath.vector3())

function init(self)
	msg.post(".", "acquire_input_focus")
	start_pos = tile_pos(self, self.start.x, self.start.y)
	emily = collectionfactory.create(":/emily_factory#collectionfactory", vmath.vector3(start_pos.x, start_pos.y, 1))
	msg.post(emily["/human_marker_obj"], "set_parent", {parent_id = go.get_id()})
	msg.post("sound#sound_fade", "fade_in", {target_gain=1})
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)


	if action_id == hash("d") and action.pressed and not map_state.rooms_selected() then
		map_state.select_doors(not map_state.doors_selected())
		msg.post(":/sound#440_660", "play_sound")
	end
	
	if action_id == hash("r") and action.pressed and not map_state.doors_selected() then
		map_state.select_rooms(not map_state.rooms_selected())
		msg.post(":/sound#440_660", "play_sound")
	end
	
	local xvel = 0
	local yvel = 0

	local move = false
	
	if action_id == hash("up") then
		yvel = yvel - self.speed
		move = true
	end

	if action_id == hash("down") then
		yvel = yvel + self.speed
		move = true
	end

	if action_id == hash("left") then
		xvel = xvel + self.speed
		move = true
	end

	if action_id == hash("right") then
		xvel = xvel - self.speed
		move = true
	end

	if move then
		local pos = go.get_position()
		pos.y = pos.y + yvel
		pos.x = pos.x + xvel
		go.set_position(pos)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function set_alarm(self, x, y)
	target = tile_pos(self, x, y)
	o = factory.create("#alarm_overlay_factory", vmath.vector3(target.x, target.y, 1))
	msg.post(o, "set_parent", {parent_id = go.get_id()})
end

function tile_pos(self, x, y)
	pos = go.get_position()
	scale = go.get_scale()
	xpos = ((x - 1) * self.tilesize * scale.x + pos.x)
	ypos = ((y - 1)* self.tilesize * scale.y + pos.y)

	return {x = xpos, y = ypos};
end