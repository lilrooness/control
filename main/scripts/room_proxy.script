local utils = require("main.modules.utils")

go.property("pressure", 100)
go.property("room_number", 0)

go.property("opened_doors", 0)

go.property("selected", false)
go.property("scale_to", vmath.vector3(2,2,1))
go.property("selected_color", vmath.vector4(1,1,1,1))

function init(self)

	self.alarm = false
	-- Add initialization code here
	-- Remove this function if not needed
	sprite.set_constant("#bg1", "alarm_color", vmath.vector4(0,0,0,0))
	sprite.set_constant("#bg2", "alarm_color", vmath.vector4(0,0,0,0))

	label.set_text("#label", "R"..string.upper(map_state.get_display_id(self.room_number)))
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	label.set_text("#pressure", tostring(math.floor(self.pressure)).."%")

	if self.pressure < 50 and not self.alarm then
		reset_alarm_animations()
		self.alarm = true
		go.animate("#bg1", "alarm_color", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1, 0, 0, 1), go.EASING_LINEAR, 0.5)
		go.animate("#bg2", "alarm_color", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1, 0, 0, 1), go.EASING_LINEAR, 0.5)
	elseif self.pressure < 100 and not self.alarm then
		reset_alarm_animations()
		self.alarm = true
		go.animate("#bg1", "alarm_color", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1, 1, 0, 1), go.EASING_LINEAR, 1)
		go.animate("#bg2", "alarm_color", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1, 1, 0, 1), go.EASING_LINEAR, 1)
	elseif self.pressure >= 100 and self.alarm then
		reset_alarm_animations()
		self.alarm = false
	end

	if not self.selected and map_state.rooms_selected() then
		self.selected = true
		label.set_text("#label", string.upper(map_state.get_display_id(self.room_number)))
		local tmp_scale = self.scale_to
		scale = go.get("#label", "scale")
		self.scale_to = scale
		go.set("#label", "scale", tmp_scale)

		local tmp_color = self.selected_color
		color = go.get("#label", "color")
		self.selected_color = color
		go.set("#label", "color", tmp_color)
	elseif self.selected and not map_state.rooms_selected() then
		self.selected = false
		label.set_text("#label", "R"..string.upper(map_state.get_display_id(self.room_number)))
		local tmp_scale = self.scale_to
		scale = go.get("#label", "scale")
		self.scale_to = scale
		go.set("#label", "scale", tmp_scale)

		local tmp_color = self.selected_color
		color = go.get("#label", "color")
		self.selected_color = color
		go.set("#label", "color", tmp_color)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_pressure") then
		go.animate("#room_proxy", "pressure", go.PLAYBACK_ONCE_FORWARD, message.pressure, go.EASING_LINEAR, 1, 0, function()
			self.alarm = false -- force alarm animation to reset
		end)
	end

	if message_id == hash("door_opened") then
		self.opened_doors = self.opened_doors + 1
	end

	if message_id == hash("door_closed") then
		self.opened_doors = self.opened_doors - 1
	end
end

function reset_alarm_animations()
	go.cancel_animations("#bg1", "alarm_color")
	go.cancel_animations("#bg2", "alarm_color")
	sprite.set_constant("#bg1", "alarm_color", vmath.vector4(0,0,0,0))
	sprite.set_constant("#bg2", "alarm_color", vmath.vector4(0,0,0,0))
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
